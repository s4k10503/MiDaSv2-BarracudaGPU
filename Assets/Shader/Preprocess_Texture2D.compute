// Preprocess
#pragma kernel Preprocess_Texture2D

Texture2D<float4> InputTexture;
RWStructuredBuffer<float> OutputTensor;
uint Size;

[numthreads(16, 16, 1)]
void Preprocess_Texture2D(uint3 id : SV_DispatchThreadID)
{
    uint textureWidth, textureHeight;
    InputTexture.GetDimensions(textureWidth, textureHeight);
    
    int tx = id.x * textureWidth / Size;
    int ty = id.y * textureHeight / Size;
    float4 color = InputTexture[float2(ty, tx)];

    // インデックス: (バッチ番号 * 高さ * 幅 * チャネル数) + (y座標 * 幅 * チャネル数) + (x座標 * チャネル数) + チャネル
    uint tensorIndex = id.y * Size * 3 + id.x * 3;
    OutputTensor[tensorIndex] = color.r;      // チャネル = 0
    OutputTensor[tensorIndex + 1] = color.g;  // チャネル = 1
    OutputTensor[tensorIndex + 2] = color.b;  // チャネル = 2
}